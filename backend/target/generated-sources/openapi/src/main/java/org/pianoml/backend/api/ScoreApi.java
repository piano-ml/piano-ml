/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.pianoml.backend.api;

import org.pianoml.backend.model.ScoreApiInfo;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-08-06T14:23:40.684288203Z[Etc/UTC]", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "score", description = "the score API")
public interface ScoreApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /score/{id} : Retrieve a score by ID
     *
     * @param id The ID of the score to retrieve (required)
     * @return ScoreApiInfo retrieved successfully (status code 200)
     *         or ScoreApiInfo not found (status code 404)
     */
    @Operation(
        operationId = "scoreIdGet",
        summary = "Retrieve a score by ID",
        tags = { "score" },
        responses = {
            @ApiResponse(responseCode = "200", description = "ScoreApiInfo retrieved successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ScoreApiInfo.class))
            }),
            @ApiResponse(responseCode = "404", description = "ScoreApiInfo not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/score/{id}",
        produces = { "application/json" }
    )

    default ResponseEntity<ScoreApiInfo> scoreIdGet(
        @Parameter(name = "id", description = "The ID of the score to retrieve", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"image\" : \"https://openapi-generator.tech\", \"has_pdf\" : true, \"year\" : 6, \"hand_separated\" : true, \"author\" : \"author\", \"uploaded_by_name\" : \"uploaded_by_name\", \"title\" : \"title\", \"version\" : 0, \"has_mxml\" : true, \"genre_id\" : \"genre_id\", \"duration\" : 5.637377, \"measures\" : 5, \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\", \"uploaded_at\" : \"2000-01-23T04:56:07.000+00:00\", \"tracks_count\" : 1, \"grade\" : 2, \"genre\" : \"genre\", \"id\" : \"id\", \"author_id\" : \"author_id\", \"has_lyrics\" : true, \"uploaded_by_id\" : \"uploaded_by_id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /score/{id} : Update a score by ID
     *
     * @param id The ID of the score to update (required)
     * @param scoreApiInfo  (required)
     * @return ScoreApiInfo retrieved successfully (status code 200)
     *         or Not authorized (status code 403)
     *         or ScoreApiInfo not found (status code 404)
     */
    @Operation(
        operationId = "scoreIdPut",
        summary = "Update a score by ID",
        tags = { "score" },
        responses = {
            @ApiResponse(responseCode = "200", description = "ScoreApiInfo retrieved successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ScoreApiInfo.class))
            }),
            @ApiResponse(responseCode = "403", description = "Not authorized"),
            @ApiResponse(responseCode = "404", description = "ScoreApiInfo not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/score/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )

    default ResponseEntity<ScoreApiInfo> scoreIdPut(
        @Parameter(name = "id", description = "The ID of the score to update", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "ScoreApiInfo", description = "", required = true) @Valid @RequestBody ScoreApiInfo scoreApiInfo
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"image\" : \"https://openapi-generator.tech\", \"has_pdf\" : true, \"year\" : 6, \"hand_separated\" : true, \"author\" : \"author\", \"uploaded_by_name\" : \"uploaded_by_name\", \"title\" : \"title\", \"version\" : 0, \"has_mxml\" : true, \"genre_id\" : \"genre_id\", \"duration\" : 5.637377, \"measures\" : 5, \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\", \"uploaded_at\" : \"2000-01-23T04:56:07.000+00:00\", \"tracks_count\" : 1, \"grade\" : 2, \"genre\" : \"genre\", \"id\" : \"id\", \"author_id\" : \"author_id\", \"has_lyrics\" : true, \"uploaded_by_id\" : \"uploaded_by_id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /score/{id}/{type} : Download a file for a specific score
     *
     * @param id The ID of the score (required)
     * @param type The type of file to download (e.g., pdf or mxml) (required)
     * @return File downloaded successfully (status code 200)
     *         or ScoreApiInfo or file type not found (status code 404)
     */
    @Operation(
        operationId = "scoreIdTypeGet",
        summary = "Download a file for a specific score",
        tags = { "score" },
        responses = {
            @ApiResponse(responseCode = "200", description = "File downloaded successfully", content = {
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "404", description = "ScoreApiInfo or file type not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/score/{id}/{type}",
        produces = { "application/octet-stream" }
    )

    default ResponseEntity<org.springframework.core.io.Resource> scoreIdTypeGet(
        @Parameter(name = "id", description = "The ID of the score", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "type", description = "The type of file to download (e.g., pdf or mxml)", required = true, in = ParameterIn.PATH) @PathVariable("type") String type
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /score/{id}/{type} : Upload a binary file for a specific score
     *
     * @param id The ID of the score (required)
     * @param type The type of file being uploaded (e.g., pdf or mxml) (required)
     * @param body  (required)
     * @return File uploaded successfully (status code 200)
     *         or Invalid input (status code 400)
     *         or ScoreApiInfo not found (status code 404)
     */
    @Operation(
        operationId = "scoreIdTypePost",
        summary = "Upload a binary file for a specific score",
        tags = { "score" },
        responses = {
            @ApiResponse(responseCode = "200", description = "File uploaded successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "404", description = "ScoreApiInfo not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/score/{id}/{type}",
        consumes = { "application/octet-stream" }
    )

    default ResponseEntity<Void> scoreIdTypePost(
        @Parameter(name = "id", description = "The ID of the score", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "type", description = "The type of file being uploaded (e.g., pdf or mxml)", required = true, in = ParameterIn.PATH) @PathVariable("type") String type,
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody org.springframework.core.io.Resource body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /score : Create a score
     *
     * @param scoreApiInfo  (required)
     * @return ScoreApiInfo successfully created (status code 200)
     *         or Bad request (status code 400)
     */
    @Operation(
        operationId = "scorePost",
        summary = "Create a score",
        tags = { "score" },
        responses = {
            @ApiResponse(responseCode = "200", description = "ScoreApiInfo successfully created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ScoreApiInfo.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/score",
        produces = { "application/json" },
        consumes = { "application/json" }
    )

    default ResponseEntity<ScoreApiInfo> scorePost(
        @Parameter(name = "ScoreApiInfo", description = "", required = true) @Valid @RequestBody ScoreApiInfo scoreApiInfo
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"image\" : \"https://openapi-generator.tech\", \"has_pdf\" : true, \"year\" : 6, \"hand_separated\" : true, \"author\" : \"author\", \"uploaded_by_name\" : \"uploaded_by_name\", \"title\" : \"title\", \"version\" : 0, \"has_mxml\" : true, \"genre_id\" : \"genre_id\", \"duration\" : 5.637377, \"measures\" : 5, \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\", \"uploaded_at\" : \"2000-01-23T04:56:07.000+00:00\", \"tracks_count\" : 1, \"grade\" : 2, \"genre\" : \"genre\", \"id\" : \"id\", \"author_id\" : \"author_id\", \"has_lyrics\" : true, \"uploaded_by_id\" : \"uploaded_by_id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /score/search : Search a score
     *
     * @param keyword A keyword (optional)
     * @param genreId genre (optional)
     * @param gradeStart  (optional)
     * @param gradeEnd the level (optional)
     * @param offset search start at (optional)
     * @param limit limit results count (optional)
     * @return ScoreApiInfo retrieved successfully (status code 200)
     *         or Bad request (status code 400)
     */
    @Operation(
        operationId = "scoreSearchGet",
        summary = "Search a score",
        tags = { "score" },
        responses = {
            @ApiResponse(responseCode = "200", description = "ScoreApiInfo retrieved successfully", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ScoreApiInfo.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/score/search",
        produces = { "application/json" }
    )

    default ResponseEntity<List<ScoreApiInfo>> scoreSearchGet(
        @Parameter(name = "keyword", description = "A keyword", in = ParameterIn.QUERY) @Valid @RequestParam(value = "keyword", required = false) String keyword,
        @Parameter(name = "genreId", description = "genre", in = ParameterIn.QUERY) @Valid @RequestParam(value = "genreId", required = false) String genreId,
        @Parameter(name = "gradeStart", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gradeStart", required = false) Integer gradeStart,
        @Parameter(name = "gradeEnd", description = "the level", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gradeEnd", required = false) Integer gradeEnd,
        @Parameter(name = "offset", description = "search start at", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "limit", description = "limit results count", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"image\" : \"https://openapi-generator.tech\", \"has_pdf\" : true, \"year\" : 6, \"hand_separated\" : true, \"author\" : \"author\", \"uploaded_by_name\" : \"uploaded_by_name\", \"title\" : \"title\", \"version\" : 0, \"has_mxml\" : true, \"genre_id\" : \"genre_id\", \"duration\" : 5.637377, \"measures\" : 5, \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\", \"uploaded_at\" : \"2000-01-23T04:56:07.000+00:00\", \"tracks_count\" : 1, \"grade\" : 2, \"genre\" : \"genre\", \"id\" : \"id\", \"author_id\" : \"author_id\", \"has_lyrics\" : true, \"uploaded_by_id\" : \"uploaded_by_id\" }, { \"image\" : \"https://openapi-generator.tech\", \"has_pdf\" : true, \"year\" : 6, \"hand_separated\" : true, \"author\" : \"author\", \"uploaded_by_name\" : \"uploaded_by_name\", \"title\" : \"title\", \"version\" : 0, \"has_mxml\" : true, \"genre_id\" : \"genre_id\", \"duration\" : 5.637377, \"measures\" : 5, \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\", \"uploaded_at\" : \"2000-01-23T04:56:07.000+00:00\", \"tracks_count\" : 1, \"grade\" : 2, \"genre\" : \"genre\", \"id\" : \"id\", \"author_id\" : \"author_id\", \"has_lyrics\" : true, \"uploaded_by_id\" : \"uploaded_by_id\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
