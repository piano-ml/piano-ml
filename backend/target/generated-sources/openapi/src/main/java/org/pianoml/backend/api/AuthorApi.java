/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.pianoml.backend.api;

import org.pianoml.backend.model.AuthorApiInfo;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-08-06T17:29:55.723979095+02:00[Europe/Paris]", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "author", description = "the author API")
public interface AuthorApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /author/{id} : Retrieve informations about an author
     *
     * @param id The ID of the author (required)
     * @return AuthorApiInfo retrieved successfully (status code 200)
     *         or AuthorApiInfo not found (status code 404)
     */
    @Operation(
        operationId = "authorIdGet",
        summary = "Retrieve informations about an author",
        tags = { "author" },
        responses = {
            @ApiResponse(responseCode = "200", description = "AuthorApiInfo retrieved successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthorApiInfo.class))
            }),
            @ApiResponse(responseCode = "404", description = "AuthorApiInfo not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/author/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AuthorApiInfo> authorIdGet(
        @Parameter(name = "id", description = "The ID of the author", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"image\" : \"https://openapi-generator.tech\", \"name\" : \"name\", \"link\" : \"https://openapi-generator.tech\", \"birth\" : \"2000-01-23T04:56:07.000+00:00\", \"bio\" : \"bio\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /author/{id} : Update an author
     *
     * @param id The ID of the author (required)
     * @param authorApiInfo  (required)
     * @return AuthorApiInfo retrieved successfully (status code 200)
     *         or AuthorApiInfo not found (status code 404)
     */
    @Operation(
        operationId = "authorIdPut",
        summary = "Update an author",
        tags = { "author" },
        responses = {
            @ApiResponse(responseCode = "200", description = "AuthorApiInfo retrieved successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthorApiInfo.class))
            }),
            @ApiResponse(responseCode = "404", description = "AuthorApiInfo not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/author/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AuthorApiInfo> authorIdPut(
        @Parameter(name = "id", description = "The ID of the author", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "AuthorApiInfo", description = "", required = true) @Valid @RequestBody AuthorApiInfo authorApiInfo
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"image\" : \"https://openapi-generator.tech\", \"name\" : \"name\", \"link\" : \"https://openapi-generator.tech\", \"birth\" : \"2000-01-23T04:56:07.000+00:00\", \"bio\" : \"bio\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /author : Create a new author
     *
     * @param authorApiInfo  (required)
     * @return AuthorApiInfo created successfully (status code 201)
     *         or Invalid input (status code 400)
     */
    @Operation(
        operationId = "authorPost",
        summary = "Create a new author",
        tags = { "author" },
        responses = {
            @ApiResponse(responseCode = "201", description = "AuthorApiInfo created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthorApiInfo.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/author",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AuthorApiInfo> authorPost(
        @Parameter(name = "AuthorApiInfo", description = "", required = true) @Valid @RequestBody AuthorApiInfo authorApiInfo
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"image\" : \"https://openapi-generator.tech\", \"name\" : \"name\", \"link\" : \"https://openapi-generator.tech\", \"birth\" : \"2000-01-23T04:56:07.000+00:00\", \"bio\" : \"bio\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /author/search/{query} : Search authors
     *
     * @param query The ID of the author (required)
     * @return List of authors (status code 200)
     *         or AuthorApiInfo not found (status code 404)
     */
    @Operation(
        operationId = "authorSearchQueryGet",
        summary = "Search authors",
        tags = { "author" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of authors", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = AuthorApiInfo.class)))
            }),
            @ApiResponse(responseCode = "404", description = "AuthorApiInfo not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/author/search/{query}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<AuthorApiInfo>> authorSearchQueryGet(
        @Parameter(name = "query", description = "The ID of the author", required = true, in = ParameterIn.PATH) @PathVariable("query") String query
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"image\" : \"https://openapi-generator.tech\", \"name\" : \"name\", \"link\" : \"https://openapi-generator.tech\", \"birth\" : \"2000-01-23T04:56:07.000+00:00\", \"bio\" : \"bio\", \"id\" : \"id\" }, { \"image\" : \"https://openapi-generator.tech\", \"name\" : \"name\", \"link\" : \"https://openapi-generator.tech\", \"birth\" : \"2000-01-23T04:56:07.000+00:00\", \"bio\" : \"bio\", \"id\" : \"id\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
