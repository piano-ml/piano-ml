/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.pianoml.backend.api;

import org.pianoml.backend.model.AccountCreatePostRequest;
import org.pianoml.backend.model.AccountLoginPost200Response;
import org.pianoml.backend.model.AccountLoginPostRequest;
import org.pianoml.backend.model.AccountPasswordResetPostRequest;
import org.pianoml.backend.model.UserApiInfo;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-08-06T17:29:55.723979095+02:00[Europe/Paris]", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "account", description = "the account API")
public interface AccountApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /account/create : Create a new account
     *
     * @param accountCreatePostRequest  (required)
     * @return Account created successfully (status code 201)
     *         or Bad request (status code 400)
     *         or User already exists (status code 403)
     */
    @Operation(
        operationId = "accountCreatePost",
        summary = "Create a new account",
        tags = { "account" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Account created successfully"),
            @ApiResponse(responseCode = "400", description = "Bad request"),
            @ApiResponse(responseCode = "403", description = "User already exists")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/account/create",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> accountCreatePost(
        @Parameter(name = "AccountCreatePostRequest", description = "", required = true) @Valid @RequestBody AccountCreatePostRequest accountCreatePostRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /account/create/{token}/confirm : Confirm account creation with token
     *
     * @param token The token to confirm account creation (required)
     * @return Account confirmed successfully (status code 200)
     *         or Invalid or expired token (status code 400)
     */
    @Operation(
        operationId = "accountCreateTokenConfirmGet",
        summary = "Confirm account creation with token",
        tags = { "account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Account confirmed successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid or expired token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/account/create/{token}/confirm"
    )
    
    default ResponseEntity<Void> accountCreateTokenConfirmGet(
        @Parameter(name = "token", description = "The token to confirm account creation", required = true, in = ParameterIn.PATH) @PathVariable("token") String token
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /account/login : Log in to an account
     *
     * @param accountLoginPostRequest  (required)
     * @return Successful login (status code 200)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "accountLoginPost",
        summary = "Log in to an account",
        tags = { "account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful login", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AccountLoginPost200Response.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/account/login",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AccountLoginPost200Response> accountLoginPost(
        @Parameter(name = "AccountLoginPostRequest", description = "", required = true) @Valid @RequestBody AccountLoginPostRequest accountLoginPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"expire\" : \"2000-01-23T04:56:07.000+00:00\", \"token\" : \"token\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /account/logout : Log out from the account
     *
     * @return Successfully logged out (status code 200)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "accountLogoutGet",
        summary = "Log out from the account",
        tags = { "account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully logged out"),
            @ApiResponse(responseCode = "401", description = "Unauthorized")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/account/logout"
    )
    
    default ResponseEntity<Void> accountLogoutGet(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /account/password_reset : Reset account password
     *
     * @param accountPasswordResetPostRequest  (required)
     * @return Password reset email sent (status code 200)
     *         or Bad request (status code 400)
     */
    @Operation(
        operationId = "accountPasswordResetPost",
        summary = "Reset account password",
        tags = { "account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Password reset email sent"),
            @ApiResponse(responseCode = "400", description = "Bad request")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/account/password_reset",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> accountPasswordResetPost(
        @Parameter(name = "AccountPasswordResetPostRequest", description = "", required = true) @Valid @RequestBody AccountPasswordResetPostRequest accountPasswordResetPostRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /account/userinfo : Get user information
     *
     * @return User information retrieved successfully (status code 200)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "accountUserinfoGet",
        summary = "Get user information",
        tags = { "account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User information retrieved successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserApiInfo.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/account/userinfo",
        produces = { "application/json" }
    )
    
    default ResponseEntity<UserApiInfo> accountUserinfoGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"image\" : \"https://openapi-generator.tech\", \"name\" : \"name\", \"bio\" : \"https://openapi-generator.tech\", \"email\" : \"email\", \"url\" : \"url\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /account/userinfo : Update user information
     *
     * @param userApiInfo  (required)
     * @return User information retrieved successfully (status code 200)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "accountUserinfoPut",
        summary = "Update user information",
        tags = { "account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User information retrieved successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserApiInfo.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/account/userinfo",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<UserApiInfo> accountUserinfoPut(
        @Parameter(name = "UserApiInfo", description = "", required = true) @Valid @RequestBody UserApiInfo userApiInfo
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"image\" : \"https://openapi-generator.tech\", \"name\" : \"name\", \"bio\" : \"https://openapi-generator.tech\", \"email\" : \"email\", \"url\" : \"url\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
