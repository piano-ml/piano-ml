name: Java CI with Maven and Docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Run tests
      working-directory: ./backend
      run: mvn --batch-mode --update-snapshots verify

    # generates coverage-report.md and publishes as checkrun
    - name: JaCoCo Code Coverage Report
      id: jacoco_reporter
      uses: PavanMudigonda/jacoco-reporter@v5.0
      with:
        coverage_results_path: backend/target/site/jacoco/jacoco.xml
        coverage_report_name: Coverage
        coverage_report_title: JaCoCo
        github_token: ${{ secrets.GITHUB_TOKEN }}
        skip_check_run: false
        minimum_coverage: 10
        fail_below_threshold: false
        publish_only_summary: false
    
    # Publish Coverage Job Summary  # Optional
    - name: Add Jacocoo report to workflow run summary
      run: |
        echo "| Outcome | Value |" >> $GITHUB_STEP_SUMMARY
        echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Coverage % | ${{ steps.jacoco_reporter.outputs.coverage_percentage }} |" >> $GITHUB_STEP_SUMMARY
        echo "| :heavy_check_mark: Number of Lines Covered | ${{ steps.jacoco_reporter.outputs.covered_lines }} |" >> $GITHUB_STEP_SUMMARY
        echo "| :x: Number of Lines Missed | ${{ steps.jacoco_reporter.outputs.missed_lines }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Total Number of Lines | ${{ steps.jacoco_reporter.outputs.total_lines }} |" >> $GITHUB_STEP_SUMMARY
        
    # # uploads the coverage-report.md artifact  # Optional
    # - name: Upload Code Coverage Artifacts
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: code-coverage-report-markdown
    #     path: */coverage-results.md 
    #     retention-days: 1  



  # build-and-publish:
  #   needs: test
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: 'read'
  #     id-token: 'write'

  #   steps:
  #   - uses: actions/checkout@v3

    # IMPORTANT:
    # The following steps for authentication and publishing to GCR are placeholders.
    # You will need to replace the values with your actual Google Cloud project details.
    # You will also need to set up Workload Identity Federation in your GCP project.
    # - name: Authenticate to Google Cloud
    #   uses: 'google-github-actions/auth@v1'
    #   with:
    #     workload_identity_provider: 'projects/YOUR_PROJECT_ID/locations/global/workloadIdentityPools/YOUR_POOL_ID/providers/YOUR_PROVIDER_ID'
    #     service_account: 'YOUR_SERVICE_ACCOUNT@YOUR_PROJECT_ID.iam.gserviceaccount.com'

    # - name: Set up Docker Buildx
    #   uses: docker/setup-buildx-action@v2

    # - name: Configure Docker for GCR
    #   run: gcloud auth configure-docker us-central1-docker.pkg.dev

    # - name: Build and push Docker image
    #   uses: docker/build-push-action@v4
    #   with:
    #     context: ./backend
    #     push: true
    #     tags: us-central1-docker.pkg.dev/YOUR_PROJECT_ID/YOUR_REPO/pianoml-backend:latest
